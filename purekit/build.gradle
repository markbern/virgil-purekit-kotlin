/*
 * Copyright (c) 2015-2019, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group "com.virgilsecurity"
version "2.0.0"

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = 1.8

dependencies {
    implementation project(":purekit-protos")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$versions.coroutinesJdk8"

    // Phe crypto
    implementation "com.virgilsecurity.crypto:common:$versions.virgil"
    implementation "com.virgilsecurity.crypto:foundation:$versions.virgil"
    implementation "com.virgilsecurity.crypto:phe:$versions.virgil"

    // Http client
    implementation "com.github.kittinunf.fuel:fuel:$versions.fuel"

    // Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.junit"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$versions.junit"
}

//task generateVersionVirgilAgent {
//    outputs.dir "$buildDir/generated"
//    doFirst {
//        def versionFile = file("$buildDir/generated/com/virgilsecurity/purekit/build/VersionVirgilAgent.kt")
//        versionFile.parentFile.mkdirs()
//        versionFile.text =
//                """
//package com.virgilsecurity.purekit.build;
//
//object VersionVirgilAgent {
//    const val VERSION = "$project.version"
//}
//"""
//    }
//}
//
//sourceSets.main.java.srcDirs = ["${buildDir}/generated/", "src/main/kotlin"]
//
//compileKotlin.dependsOn(generateVersionVirgilAgent)

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    systemProperties System.properties
}

afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')

    junitPlatformTestTask.systemProperties project.gradle.startParameter.systemPropertiesArgs
}

task sourcesJar(type: Jar) {
    from(sourceSets["main"].allSource)
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    from "$buildDir/javadoc"
    classifier = 'javadoc'
}

def authentication_username = hasProperty('authentication_username') ? authentication_username : System.getenv('authentication_username')
def authentication_password = hasProperty('authentication_password') ? authentication_password : System.getenv('authentication_password')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'purekit'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Purekit Kotlin/Java SDK'
                description = 'Virgil Security introduces an implementation of the Password-Hardened Encryption (PHE) protocol that provides developers with a technology to protect users passwords from offline/online attacks and make stolen passwords useless even if your database has been compromised.'
                url = 'https://www.virgilsecurity.com/'
                licenses {
                    license {
                        name = 'Virgil Security, Inc. license'
                        url = 'https://github.com/virgilsecurity/virgil-purekit-kotlin/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'BuddahLD'
                        name = 'Danylo Oliinyk'
                        email = 'doliinyk@virgilsecurity.com'
                        organizationUrl = 'https://www.virgilsecurity.com/'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/virgilsecurity/virgil-purekit-kotlin.git'
                    developerConnection = 'scm:git:git@github.com:virgilsecurity/virgil-purekit-kotlin.git'
                    url = 'https://github.com/virgilsecurity/virgil-purekit-kotlin'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "${authentication_username}"
                password "${authentication_password}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}
